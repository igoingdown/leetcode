463. Island Perimeter
https://leetcode.com/problems/island-perimeter/
就是逐一遍历所有的cell，用分离的cell总的的边数减去重叠的边的数目即可。在查找重叠的边的数目的时候有一点小技巧，就是沿着其中两个方向就好，这种题目都有类似的规律，就是可以沿着上三角或者下三角形的方向来做。一刷一次ac，但是还没开始注意codestyle的问题，需要再刷一遍。

 

455. Assign Cookies
https://leetcode.com/problems/assign-cookies/
给出两个序列，一个序列中的元素代表cookie的size，另外一个序列代表能满足孩子要求的最小cookie的size，问如何分配使得到的满意的孩子最多。先将两个序列都按从小到大顺序排序，然后按双路指针的方式解决。一刷一次ac，但是对于C++默认的sort函数的排序方式（从小到大还是从大大小）并不是很清楚。
算法库中的sort(beg, end, comp)函数实际使用快排，其中的comp是函数或者函数指针，签名是 bool comp(elem_type first_arg, elem_type second_arg)，返回的bool值的含义是第一个参数是否应该排在第二个参数的前面。而且默认参数会将较小的参数排在前面，即sort函数默认是从小到大排序！
 

453： Minimum Moves to Equal Array Elements
https://leetcode.com/problems/minimum-moves-to-equal-array-elements/
一开始自己对题目的理解出错了，浪费了不少时间。每次移动要求同时将n-1个元素加1，我看成了每次移动将其中2个元素加1。搞清楚题目真正含义之后，不太会做，参考了一下其他人的解题思路：给数组中的n-1个元素加1的操作等价于数组中“不加1的那个元素“减去1，然后数组中的所有元素都加1。我们知道，给所有的元素都加1并不能改变原数组中的数之间的差值。所以这题就转化为求最少的减1操作。而要使数组中的元素全部相等，又要使用减法。那么最少的次数就是让这些元素全部都等于数组中最小的数。所以得到的结果就是sum（所有元素和）-n*数组中最小元素。
注意看题目！一刷由于c++的api用的不熟，调用了min这个api，发现c++是没有这个api的，还有很多codestyle的问题，二刷注意了一下codestyle，一次ac，代码如下：

python版的代码一行完事：
 

383. Ransom Note
https://leetcode.com/problems/ransom-note/
就是用后一个串合成前一个串，条件是后一个串的每个字符只能用一次，这种题都可以利用c++的字符和int型转换来构建一个长为26度数组，每个数组表示一个key（前提是全大写或者全小写）。
一刷for循环中的计数器i没有声明类型（int），编译错误。二刷一次ac。

 

404. Sum of Left Leaves 
https://leetcode.com/problems/sum-of-left-leaves/
看到这种题知道用递归，但是自己的思路很长时间没有理清。递归算法只要想明白一个节点的情况，其他节点都一样。对于每个节点如果指针为空，返回0；如果该节点飞空且左子树为叶子节点，则返回左叶子节点和右子树递归结果的和，否则返回左右子树的递归结果的和。一刷在处理左子树为叶子节点的情况时少写了val，二刷一次ac。

还有一种写了两个函数的算法，其实差不多。一刷第一次调用dfs函数参数给错了，只有一个root节点不算左叶子结点。二刷出现不明bug……没解决！

递归算法虽然简单明了，缺点是低效。尝试非递归算法，但是效率并没有提升，可能是因为递归与非递归算法用的是相同的原理：栈。一刷没有处理root为空的情况，忘记写返回语句。二刷也没有处理root为空的情况，另外没有声明类型，并且把变量名混淆。三刷处理了root为空的情况，但是处理栈顶元素的时候直接处理栈顶元素，其实应该处理栈顶元素的左右结点。四刷一次ac。
 

409. Longest Palindrome
https://leetcode.com/problems/longest-palindrome/
比较简单，如果字母个数为偶数，直接加，字母个数为奇数，加上减一后的值，由于回文串中间可以放一个长度为一的子串，因此如果有个数为奇数的字母，最后结果要加一。
一刷统计小写字母的出现次数时，条件写反了。计算最后结果时注意处理出现次数为奇数的字符。二刷一次ac。
 

448. Find All Numbers Disappeared in an Array 
https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/
要求不能使用额外空间，只能在原数组上进行改动，将提到的元素对应的索引上的值加上负号，对后续的遍历操作影响不大（取绝对值就行）。由于在遍历到i之前已经将i后到元素置为负值，因此要在遍历到时候就加上绝对值。一刷中括号写成了小括号（取数组元素写成了函数调用，这两者的区别大了），在加入结果的时候少写了if语句。二刷一次ac。


442. Find All Duplicates in an Array
https://leetcode.com/problems/find-all-duplicates-in-an-array/
题目和上面那道题差不多，而且更简单！可是我没想到。和上一题的区别在于在处理重复赋值时直接就加入结果队列了。一刷一次ac。


414. Third Maximum Number
https://leetcode.com/problems/third-maximum-number/
找出n个数中的第m（m < n）大的数，这是个经典问题，我去望京面试的时候就被问到，我当时真菜，不然暑假可以拿好多钱，哼！当m不太大（m<4）时，都可以按同一种思路解决 ，就是同时设置多个max，遍历数组元素，分条件更新max。注意两点，一是max的初始化一定要比当前数组元素类型的最小值要小；二是max更新条件要写全，“=”的情况要排除。
一刷各max的更新顺序写反了，max更新条件没写全，没有用更大范围的数据类型。二刷一次ac。
 

289. Game of Life
https://leetcode.com/problems/game-of-life/
一刷判断自身的条件写错，死而复生的判断条件写错，代码效率不高。二刷代码结构有优化，但是效率还是不高，判断语句中==写成赋值号=，cell周环遍历数列写错（1写成-1）。三刷没有ac是因为不理解c++_11新特性。(auto n : vec)中的n是临时变量，修改n不能改变原来vector中的元素，因此在不需要修改vector中元素时遍历可以用auto，但是要修改vector中的元素，还是需要迭代器或者下标。
 

287. Find the Duplicate Number
https://leetcode.com/problems/find-the-duplicate-number/
一刷使用二分法，但是对二分法中low和high的更新细节不清楚，多个同类型的变量一起声明时应该用逗号隔离。二分法中low与high的更新过程和后面的返回值是low还是mid又有什么关系，还需要一点时间来理解。看了大神的博客知道发现更高效的算法，就是转化为链表内部环检测的问题。链表成环检测的问题是一个经典问题，大神的博客分析非常精彩，核心思想是用快慢指针走过的路程和环长等进行推理和证明，最后一个恒等式的利用非常精彩。大神博客地址为：http://www.cnblogs.com/ccdev/archive/2012/09/06/2673618.html,二刷使用该方法一次ac。
 

268. Missing Number
https://leetcode.com/problems/missing-number/
一开始掉进了前面的解法的坑里，老想着把元素当作索引，将正值变负值，然后找改变后的数组中的正值对应的元素，由于同时有n和0，这两种情况不能有效区分，而且也没说可以改动数组，故抛弃了这种解法。求和再做减法更方便，由于担心溢出，用了范围更大的数据结构，好像没什么用。
 

229. Majority Element II
https://leetcode.com/problems/majority-element-ii/
看了一篇博客，恍然大悟，很开心，就喜欢这种感觉。原博地址：http://blog.neoshell.moe/leetcode229.html
简而言之就是BM多数投票算法（Boyer-Moore Majority Vote algorithm）。代码效率好像不高，还要找找更高效的算法。一刷很快ac，二刷一次ac。
要注意变量的初始化，将n1，n2初始化为任意两个不同的数就行，对应counter设置为0是关键。还要注意一点第一次遍历结束只是明确了n1，n2是出现频率最高的数，但是对应的counter是不准的，需要重新计数！最后需要查看counter是否满足条件。


228. Summary Ranges
https://leetcode.com/problems/summary-ranges/
题目不难，需要注意变量的初始化和主循环之后的操作。记得返回处理结果！一刷算法效率不高，但是这是自己的思路，虽然代码写完之后自己也无法复现完整的思维过程。一开始思路不清晰，先写了一些不成熟的代码，然后不断修补，最后即使ac，思路已经支离破碎！还是需要完整而简洁的思路，如果自己没有这种思路，就去找优美的思路，然后逐行理解，把大神的思路变成自己的！
二刷我找到了一篇大神的博客，代码简洁而且思路清晰。用b记录本次范围的起始位置，用i作为索引。注意更新i和b时先更新i再更新b，而且是拿第i个元素和第i+1个元素比较，这样就不必在循环体外单独处理最后一个元素了！这点经验非常宝贵！三刷一次ac。


216. Combination Sum III
https://leetcode.com/problems/combination-sum-iii/
一刷使用dfs解决。我总是不太会构造递归，要注意这种题型！用递归解决问题，只要关注解决本层次的问题就好，通过条件筛选和循环将本层解决完，调用本身进入下一层。这种说法很简单，其实不容易做到！
注意剪枝条件，比如left可能等于i，每步循环中，需先将元素插入列表尾部，在下一层递归结束后，要将插入的元素从尾部取出！
二刷将“,”写成“;”，一定要注意书写！

209. Minimum Size Subarray Sum
https://leetcode.com/problems/minimum-size-subarray-sum/
一开始把题目意思理解错了，浪费了很多时间。subarray是原array的连续子序列，就像substring是原string的连续子序列一样。基于错误的理解，我使用dfs来解决，后来超时才反应过来。一定要好好看题，正确理解题意，往往事半功倍！正确地理解了题意之后，一刷很快ac。二刷更新min_size时没有判别，代码有小幅更新（能用while就不要用for）。
用sum和left记录当前subarray的和与起始位置，注意同时更新sum和left，每次更新min_size之前需要对当前subarray的size进行判别。


162. Find Peak Element
https://leetcode.com/problems/find-peak-element/
一刷使用直接遍历的方法，很笨，写了一半发现可疑从两头一起开始遍历，但是时间复杂度并没有明显改善。二刷使用基于迭代的二分法，二分法的合理性感觉可以用罗尔定理证明。变量名写错，mid的判断条件写错。
以后就把自己的二分法固定下来，while里面填low < high, 更新方式为high = mid， low = mid + 1， 返回low。这样以来，写代码的时候实际要判断的只有更新条件了！


二分法还可以用递归的方式表现。


154. Find Minimum in Rotated Sorted Array II
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/
原来algorithm库中是有min（max）函数的，也有min(max)_element函数的！但是min（max）函数只接受两个参数，没什么实用价值，min(max)_element函数也没什么大的使用价值，返回迭代器。
其实比较简单，一刷一次ac。说实在的，自己被这个hard标志吓得不轻。

153. Find Minimum in Rotated Sorted Array
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
和154一模一样。


152. Maximum Product Subarray
https://leetcode.com/problems/maximum-product-subarray/
原理是dp，但是我对dp并不熟！关键在于当前的max和min并不是全局的max和min，每遍历一个元素就要更新全局的max（res）。一刷变量名写错，效率也不高。二刷由于不理解DP，更新过程写错！三刷一次AC。



344. Reverse String
https://leetcode.com/problems/reverse-string/
字符串翻转，很简单。使用内置函数swap简化了代码，一次AC。


136. Single Number
https://leetcode.com/problems/single-number/
用亦或进行位运算。可以想象为一个多层公寓，每个公寓住着0或者1，亦或运算就是所有圆柱体内的数字进行亦或。一次AC。


104. Maximum Depth of Binary Tree
https://leetcode.com/problems/maximum-depth-of-binary-tree/
一刷使用层序遍历（BFS），一次AC，效率不高。二刷使用DFS，一行解决问题，效率也非常高，一次AC。


389. Find the Difference
https://leetcode.com/problems/find-the-difference/
对于字符串的常用方法，将字符转为数组下表，从而将空间复杂度降到O(N)。二刷一次AC。


226. Invert Binary Tree
https://leetcode.com/problems/invert-binary-tree/
使用递归，较简单，二刷一次AC。


169. Majority Element
https://leetcode.com/problems/majority-element/
二刷使用BM投票算法，因为初始化错误没能AC，深层原因在于没能透彻理解BM算法。


206. Reverse Linked List
https://leetcode.com/problems/reverse-linked-list/
比较简单，但是非常常考！二刷比较注意codestyle，一次AC。


100. Same Tree
https://leetcode.com/problems/same-tree/
使用递归，教简单，二刷改善了codestyle，逻辑也更清晰，一次AC。


128. Longest Consecutive Sequence
https://leetcode.com/problems/longest-consecutive-sequence/
被hard标签吓住，确实也没想到好方法，要求O(N)的复杂度。先看的discuss区，discuss区的TOP1解法讲解非常好。大神用的是Python，我用C++实现的。比较简单，一刷end计数器退出循环时的数值搞错，WA。
改正之后AC。二刷unordered_set的定义中没有将模板实例化。三刷一次AC。


126. Word Ladder II
https://leetcode.com/problems/word-ladder-ii/
使用BFS，代码非常复杂，这道题确实很难，通过率仅13%！需要考虑的东西很多，看大神的代码看了3天才算弄明白怎么回事。还是要动笔自己跑几个demo，这样非常有助于了解算法的精妙之处。大神的代码是用java写的，我把它翻译成了C++，也挺有难度的！一刷在XCODE上写的，debug花了不少时间，不过这样一来对C++的容器的使用更熟练了。非常关键的一点在于不能重复向队列中插入元素！二刷有两处语法错误，一个函数签名写错（少写了一个引用符号），导致返回结果为空，比起一刷进步很大，非常开心。三刷一次AC，写的时候细心一点，还是可以一次AC的！


121. Best Time to Buy and Sell Stock
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
比较简单，但是看了一会没什么思路，看了discuss区的答案。思路是遍历每天的股价，记录今日之前的最低价和最高收益，和今日股价比较更新最低价，最高收益和今天卖出的收益比较更新。一刷一次AC，但是思路不是自己的！


120. Triangle
https://leetcode.com/problems/triangle/
又是DP，从底网上找。一刷for循环里面的变量名写错，也是醉。这种算法的空间复杂度为O(N)，还有一种空间复杂度为O(1)的算法，下次来的时候好好调研一下。

 
106. Construct Binary Tree from Inorder and Postorder Traversal
https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
再次吊死在二叉树上！这个算法人来做不难，很好理解，但是翻译成机器能理解的算法就很困难！这就是人类和机器思维的区别吗？一刷在IDE上写的，没理解透彻。非递归算法确实不太好懂，明天再试试递归算法。还是递归算法比较容易理解。


105. Construct Binary Tree from Preorder and Inorder Traversal
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
和上一题的方法完全一样，我用的是递归方法，但是参数传递已经尽量少了，所以性能牺牲不是太多，因为牺牲在函数调用上。一刷函数签名少写了引用符号，导致运行时内存溢出。二刷AC。


80. Remove Duplicates from Sorted Array II
https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/
比较简单，将重复次数小于3的元素往前移动，其他元素不动，就得到了重复次数最多为2的元素的个数。一刷题目理解不清，循环条件写错。二刷循环条件写错。三刷一次AC。


81. Search in Rotated Sorted Array II
https://leetcode.com/problems/search-in-rotated-sorted-array-ii/
适合用二分法，但是“十个二分九个错”！花了不少时间。本质是分类问题，关键在于选择分类标准，分不了走的步子小一点！画图是个解决问题的好办法。一刷分类标准选的不好，在XCODE上debug很长时间才AC。


78. Subsets 
https://leetcode.com/problems/subsets/
一刷由于对vector的一些成员函数不熟悉，没有AC。二刷一次AC。讨论区第一名的算法是基于bitmap做的，一刷由于对vector的多元素版本的构造函数格式不熟，没能AC。二刷一次AC。
 

75. Sort Colors
https://leetcode.com/problems/sort-colors/
这道题是让手写排序，一刷手写快排没AC。二刷由于多次将左侧边界想当然地视为0（其实是l）没能AC。讨论区第一名的算法针对特殊情况（只有0， 1， 2三个数字）对普适的排序算法做了优化，一刷循环条件写错没AC。二刷思路不清晰，没AC，注意需要两层循环，内层循环只处理连续的符合条件的情况，外层需要等于因为该index对应的值谁也不知道是几。第二种算法的在时间效益上不如快排。
 

74. Search a 2D Matrix
https://leetcode.com/problems/search-a-2d-matrix/?tab=Description
二分法的升级版，一刷选对应行的时候没考虑全，导致在[[1], [3]]找1这个case下死循环。讨论区第一名算法将matrix视为一维数组，一维数组的索引和二维数组索引的关系是：对于m*n矩阵A，如果将其视为一维数组B，则B[x]=A[x / n][x%n]。一刷本地IDE上debug艰难AC。二刷在纸上纯手写一次AC。


73. Set Matrix Zeroes
https://leetcode.com/problems/set-matrix-zeroes/?tab=Description
开始的思路是跟74题一样，视为一维数组，但是并不合适。讨论区第一名的算法，很好。将第一行第一列作为标志！第一列再另设标志。采用迂回的方式进行两次遍历。算法复杂度高些，但是好理解。一刷写错变量名，没AC。


64. Minimum Path Sum
https://leetcode.com/problems/minimum-path-sum/?tab=Description
DP算法，Discuss区第一名将空间复杂度从O(N^2)缩减到O(N)，并且给出了完整的解析，看了两个晚上，才有点明白。一刷AC，但是还要再刷！二刷一次AC。
 

62. Unique Paths
https://leetcode.com/problems/unique-paths/?tab=Description
一种算法和64题相似,一刷变量名写错没能AC。另一种直接算C(N, k)，数学真是太美好了。算组合数的算法时间复杂度高于DP算法，是因为乘法远比加法费时间！一刷表达式写错没能AC。二刷理解了思路，一次AC。


63. Unique Paths II
https://leetcode.com/problems/unique-paths-ii/?tab=Description
和62，64题思路相似，区别在于初始化。循环过程也有小的差异。一刷叠式的vector的初始化写错没能AC，这个问题还没想清楚。


59. Spiral Matrix II
https://leetcode.com/problems/spiral-matrix-ii/?tab=Description
挺有意思的一道题，按照讨论区C++排名第一的算法做的。这道题一开始以为有两者分解方式。我以为前面一种充满几何的美感，结果这是个陷阱！！后者才是正确的分解！一刷再一次因为嵌套式vector的初始化语法错误没能AC！！


56. Merge Intervals
https://leetcode.com/problems/merge-intervals/?tab=Description
比较简单，没太多技巧。我也有思路，但是远远达不到讨论区C++第一名的算法的简洁。第一名的算法在调用sort函数的时候重载了[]操作符，我不太理解这种方法，在函数外定义了自己的compare函数。有两个问题没搞清，一是为什么自己定义的compare函数无论是重载操作符形式还是一般的返回bool的形式，都只能用小于号，不能加等于号，加了就导致运行时错误！第二点就是重载操作符的理解又忘了！一刷没有AC。


55. Jump Game
https://leetcode.com/problems/jump-game/?tab=Description
看了讨论区的两个算法，一个很简洁，4行完事，思路是遍历每个元素，看每个元素当前能达到的最远处是否包括当前元素（本质是0能不能跳过），一刷AC。另一个效率高些，思路更清晰，就是看0元素能不能跳过去，一刷没AC，注意循环从倒数第二个元素开始，因为最后一个元素的值是不用考虑的。


54. Spiral Matrix
https://leetcode.com/problems/spiral-matrix/?tab=Description
按照59题相似的思路，出现了两个比较大的BUG，一是内层while循环索引没有递增/减，二是在两次反向遍历的时候要加一个判断条件，以免与正向遍历的是同一行/列。一刷没AC。


53. Maximum Subarray
https://leetcode.com/problems/maximum-subarray/?tab=Description
还是DP算法，不好理解。画了个函数图像，感觉稍微好些。


48. Rotate Image
https://leetcode.com/problems/rotate-image/?tab=Description
采用讨论区第一名的算法，效率不是很高，但是很容易明白。是一种普适的方法。对于旋转先将矩阵进行行逆序，然后对角互换。对于逆时针旋转则是先进行列逆序。一刷AC，但是还是要继续刷！！


40. Combination Sum II
https://leetcode.com/problems/combination-sum-ii/?tab=Description
讨论区第一名的算法先对候选排序，然后使用DFS，搜索路径。注意去除可能重复的路径和并进行必要的剪枝。一刷变量名写错没AC，对去重的理解也只限于想象，没有验证。讨论区第一名算法我添加了剪枝之后，算法执行时间缩短很多，还是挺有成就感的。


39. Combination Sum
https://leetcode.com/problems/combination-sum/?tab=Description
做了第40题之后，做这道题就觉得比较简单了，可以画树状图来理解计算机的求解过程。一刷for循环中；写成了，没AC。


35. Search Insert Position
https://leetcode.com/problems/search-insert-position/?tab=Description
非常简单，一次AC。


34. Search for a Range
https://leetcode.com/problems/search-for-a-range/?tab=Description
比较简单，一看就有思路。二分法，第一个版本是分别用两次二分查找查上界和下界，一次AC。终于明白了二分查找查找符合目标下界和符合目标上界的区别和联系，联系在于每次循环必须更新mid！区别在于求下界时mid要向下界靠拢，求上界的时候mid要向上界靠拢，这种看透彻的感觉很爽。就是算法效率不高。第二版先使用二分查找找到下界，然后从下界往后遍历找上界，然后就掉进了C++的坑里了。C++的[]操作是不检查[]中的index是否超出vector的size的，所以在使用[]进行遍历的时候，一定要加上size的限定条件。第二版没AC。


33. Search in Rotated Sorted Array
https://leetcode.com/problems/search-in-rotated-sorted-array/?tab=Description
比81题简单一些，因为不用考虑重复。81题做完就扔了，也没来得及复习，分类标准理解了，但是分类细节还是没把握好，一刷没AC。算法的效率也不高。


31. Next Permutation
https://leetcode.com/problems/next-permutation/?tab=Description
第一眼没思路，选择了讨论区一个比较好理解的算法，效率还不错。先从后将降序变为升序，然后找升序中前一个数字的上界与该数字替换。一次AC，对算法本身理解不深，还要再刷。





















 

 

 

 


